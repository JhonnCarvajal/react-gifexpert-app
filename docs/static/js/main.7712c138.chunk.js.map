{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hook/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetcGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OAExCN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GAEzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAEyBC,UAAUH,GAFnC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVlB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAACC,GAE1B,OAAO,sBAAKC,UAAW,yCAAhB,UACFD,EAAMJ,MACP,qBAAKM,IAAKF,EAAMd,IAAKiB,IAAM,oBCHpBC,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SACxB,ECDyB,SAACA,GAC1B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACC,GACtBH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAIZ,CAACrB,IAEGsB,EDf2BK,CAAY3B,GAAhCa,EAAd,EAAQN,KAAcc,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAKrB,IACL,sBAAKiB,UAAU,8CAAf,UACGI,GAAW,2CACXR,EAAOJ,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,cEgBxBiB,EAzBM,WAEnB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAQA,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG4C,EAAWpB,KAAI,SAACT,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MChB/B8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.7712c138.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const handleInputChange = (e) => {\r\n    //console.log(e.target.value);\r\n    setInputValue(e.target.value);\r\n  };\r\n  const hanldeSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 1) {\r\n      setCategories((cats) => [inputValue, ...cats]); //se paso como props una funcion(setCategories) aqui se puede ver la utilidad\r\n      // de usar el callback del use State para acceder al estado anterior, pues no contamos con ese estado directamente, al ser otro componente\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={hanldeSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZPdbbzFw6R4VYd42f1hyeHnMVKpzh3hA`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    //console.log(data);\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images.downsized_medium.url,\r\n      };\r\n    });\r\n    //console.log(gifs);\r\n    return gifs;\r\n  };","import React from \"react\";\r\n\r\nexport const GifGridItem = (props) => {\r\n  //console.log(props);\r\n  return <div className={'card animate__animated animate__fadeIn'}>\r\n      {props.title}\r\n      <img src={props.url} alt = 'Cargando...'/>\r\n      </div>;\r\n};\r\n","import React from \"react\";\r\nimport { useFetcGifs } from \"../hook/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetcGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      <div className=\"card-grid animate__animated animate__fadeIn\">\r\n        {loading && <p>Loading...</p>}\r\n        {images.map((img) => {\r\n          return <GifGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetcGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n    \r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nconst GifExpertApp = () => {\r\n  //const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n  /*\r\n  const handleAdd = () => {\r\n    //setCategories([...categories,'HunterXHunter']);// Una soluci[n BIEN!!!!\r\n    setCategories((cats) => [...cats, \"HunterXHunter\"]); //El segundo parametro que se envia al useStae\r\n    //La funcion modificadora, tiene un callback que recibe como primer argumento el estado anterior!!!!!\r\n  };\r\n  */\r\n  return (\r\n    <>\r\n      <h2>Gif Expert App</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      {/* <button onClick={()=>handleAdd()}>Agregar</button> */}\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}